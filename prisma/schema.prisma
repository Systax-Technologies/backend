generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String

  employee Employee?
  customer Customer?
}

enum Role {
  ADMIN
  WORKER
}

model Employee {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id])
  role Role @default(WORKER)
}

model Customer {
  id                String       @id @default(cuid())
  billingAddressId  String
  billingAddress    Address?     @relation(name: "billingAddresses", fields: [billingAddressId], references: [id])
  shippingAddressId String
  shippingAddress   Address      @relation(name: "shippingAddresses", fields: [shippingAddressId], references: [id])
  creditCard        CreditCard[]

  order         Order[]
  userId        String          @unique
  user          User            @relation(fields: [userId], references: [id])
  activeProduct ActiveProduct[]
  Address       Address[]
}

model Address {
  id                String     @id @default(cuid())
  street            String
  number            String
  city              String
  province          String
  state             String
  postalCode        Int
  customerId        String?
  customer          Customer?  @relation(fields: [customerId], references: [id])
  customersShipping Customer[] @relation(name: "shippingAddresses")
  customersBilling  Customer[] @relation(name: "billingAddresses")
}

model CreditCard {
  id           String     @id @default(cuid())
  number       Int
  expMonthDate Int
  expYearDate  Int
  secretCode   Int
  customer     Customer[]
}

enum OrderStatus {
  ORDERED
  IN_PROGRESS
  SHIPPED
  IN_TRANSIT
  DELIVERING
  DELIVERED
}

model Order {
  id          String      @id @default(cuid())
  status      OrderStatus @default(ORDERED)
  orderedAt   DateTime    @default(now())
  shippedAt   DateTime?
  deliveredAt DateTime?

  products   Product[]
  customerId String
  customer   Customer  @relation(fields: [customerId], references: [id])
}

enum ProductStatus {
  IN_STOCK
  SOLD
}

model Product {
  id     String        @id @default(cuid())
  status ProductStatus @default(IN_STOCK)

  orderId       String?
  order         Order?         @relation(fields: [orderId], references: [id])
  productTypeId String
  productType   ProductType    @relation(fields: [productTypeId], references: [id])
  activeProduct ActiveProduct?
}

model ProductType {
  id          String   @id @default(cuid())
  model       String
  imageUrl    String
  description String
  color       String
  size        String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
}

enum ActiveProductStatus {
  ACTIVE
  REMOVED
  DAMAGED
}

model ActiveProduct {
  id     String              @id @default(cuid())
  status ActiveProductStatus @default(ACTIVE)

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [id], references: [id])
}
